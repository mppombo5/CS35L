1.1
    1. just start the file
    2. C-s H T M L
    3. DEL DEL DEL DEL C-s s c a v e n g e r C-s M-b
    4. C-s s e l f - r e f e r e n t i a l M-b M-b
    5. C-s a r r o w M-b
    6. C-e
    7. C-a
    
    10. C-x C-c

1.2
    1. open the file with emacs
    2. M-g g 18 Enter Down C-k
    3. C-s D E L E T E - M E C-a C-k
    4. C-s H T M L _ c o m m e n t C-s C-a Up C-u 3 C-k
    5. C-s < ! - - M-b M-f C-u 7 C-d C-s < ! - - C-a C-u 4 C-k C-s < ! - - C-a C-k

1.3
    1. open the file with emacs
    2. C-s A s s i g n m e n t Space 1 Left C-d 4 2 C-s A s s i g n m e n t Space 1 Left C-d 4 2
    3. M-< C-s U T F - 8 M-DEL M-DEL U S - A S C I I
    4. M-< C-M-s [ ^ [ : a s c i i : ] ] C-a C-k
    5. M-< C-s < / o l > Enter Enter
    6. C-x C-s C-x C-c

1.4
    3. M-> Up Up Right C-Space C-e M-w M-g g 4 2 6 Down Down Down Return C-y M-> C-u 1 5 Up Right C-Space C-u 4 Down C-e M-w M-g g 4 1 1 C-y C-k C-a C-d Up C-d Up C-d Up C-d M-> C-u 2 6 Up Right C-Space Down Down C-e M-w M-g g 3 6 7 Enter C-y C-a C-d Up C-d M-> C-u 3 5 Up Right C-Space C-e M-w M-g g 1 2 8 Enter C-y M-> C-u 4 5 Up Right C-Space Down Down C-e M-w M-g g 1 8 Enter C-y

    5. M-g g 4 3 8 Enter C-Space M-> C-w
    6. C-_
    7. M-g g 4 3 8 Enter < ! - - M-> - - >
    8. M-< C-s < o l > C-s C-s C-s C-s C-s C-s C-s (I found 7 instances of <ol>.) M-% < o l > Enter < o L > Enter y

1.5
    1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
    2. C-x C-f j u n k / h e l l o . c Enter (then copy and paste C code into new file)
    3. C-x C-s M-x c o m p i l e Enter h e l l o Enter
    4. C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
    5. The buffer just says "EOF on input"

1.6
    1. C-x b Enter
    2. r a n d o m ( " 4 0 5 - 1 4 0 - 0 3 6 " ) C-j (the output is -404487452848944244.)
    3. Enter ( s e t q Space x Space ( r a n d o m ) ) C-j Enter ( s e t q Space y Space ( r a n d o m ) ) C-j Enter (x is 1353423110756185965, y is -169874072981900184.)
    4. ( * Space x Space y ) C-j (The product I get is 1247705067001538632. Not only is this not negative, like it should be, but there are far too few digits in this product.)
    5. M-: ( * Space x Space y ) Enter (The initial numerical answer is the same, but there are two different representations of it following, which I can assume to be octal (#o) and hex (#x) representations.)
    6. The two integers are not random, as they are produced using the seed we generated in the first step.
    7. Assuming the result is a 64-bit signed integer, and that the biggest representable value is 2^64, the number will not overflow as long as the real mathematical answer is less than 2^64. The number of valid inputs can be given by the sum of (2^64 / n) from n=1 to n=2^32, because (2^32)^2 will give 2^64, and every time the second number is increased by 1 the number of valid multiplications decreases by 2^64 / n. The total number of possible inputs, valid and invalid, should be (2^64)^2, or 2^128. Therefore, the probability of getting a result that doesn't overflow should be (sum 2^64 / n, n=1 to n=2^32)/(2^128).